---
import Layout from '@layouts/Default.astro';
// Define colors for styling
const colors = ['bg-pink', 'bg-blue', 'bg-green', 'bg-yellow', 'bg-purple'];
const randomColor = colors[Math.floor(Math.random() * colors.length)];
// Define game state
const maxRounds = 8;
const images = [
  { src: 'https://i.pinimg.com/736x/fa/e9/6c/fae96c9ae39a45b5e82b8e543b9d0043.jpg', alt: 'Confused', emotion: 'confused', explanation: 'The furrowed brow and questioning expression are typical signs of confusion' },
  { src: 'https://media.istockphoto.com/id/1045886560/photo/portrait-of-smiling-handsome-man-in-blue-t-shirt-standing-with-crossed-arms-isolated-on-grey.jpg?s=612x612&w=0&k=20&c=TX1-1UJ3PKonFEmgs_WDZf7wtfqKVMHYjeRaYjaZ1Rc=', alt: 'Happy', emotion: 'happy', explanation: 'The wide smile and uplifted eyebrows indicate a positive and cheerful mood' },
  { src: 'https://img.freepik.com/free-photo/indoor-shot-emotional-curly-haired-young-woman-screams-loudly-keeps-palms-raised-mouth-opened-going-crazy-dressed-casual-green-knitted-sweater-poses-against-pink-background-feels-excited_273609-57240.jpg', alt: 'Excited', emotion: 'excited', explanation: 'The wide open mouth and energetic expression show excitement and enthusiasm' },
  { src: 'https://i.pinimg.com/736x/36/c3/3e/36c33e3ff7a210fdd48c57a7436cd61d.jpg', alt: 'Surprised', emotion: 'surprised', explanation: 'The wide-open eyes and slightly parted lips indicate surprise or astonishment' },
  { src: 'https://i.pinimg.com/736x/75/09/cd/7509cd625a684d1544aa7ca2b03809bc.jpg', alt: 'Determined', emotion: 'determined', explanation: 'The furrowed brow and focused expression suggest determination and resolve' },
  { src: 'https://i.pinimg.com/736x/17/23/95/172395fae6e480ee06ded2e59f4d7934.jpg', alt: 'Angry', emotion: 'angry', explanation: 'The furrowed brow and intense expression indicate anger or frustration' },
  { src: 'https://i.pinimg.com/736x/79/f1/6a/79f16a489aab154dd0b76b91d078f42b.jpg', alt: 'Sad', emotion: 'sad', explanation: 'The downward-facing mouth and drooping eyebrows suggest sadness or unhappiness' }
];
---

<Layout title="Emotion Game">
<Layout title="Emotion Game" description="A game to test your emotion recognition skills">
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto">
      <div class="text-center mb-8">
@@ -27,6 +39,17 @@
        <!-- Options will be dynamically inserted here -->
      </div>

      <div id="feedback" class="hidden text-center mb-4">
        <p id="feedback-text" class="text-xl font-bold mb-2"></p>
        <p id="explanation-text" class="text-gray-700"></p>
        <button
          id="next-round"
          class="mt-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors"
        >
          Next Round
        </button>
      </div>
      <div id="game-over" class="hidden text-center">
        <h2 class="text-2xl font-bold mb-4">Game Over!</h2>
        <p class="text-xl mb-4">Final Score: <span id="final-score">0</span></p>
@@ -42,99 +65,108 @@
</Layout>

<script>
  interface Image {
    src: string;
    alt: string;
    emotion: string;
    explanation: string;
  }
  let currentRound = 0;
  let score = 0;
  const maxRounds = 8;
  const images = [
    { src: 'https://i.pinimg.com/736x/fa/e9/6c/fae96c9ae39a45b5e82b8e543b9d0043.jpg', alt: 'Confused', emotion: 'confused', explanation: 'The furrowed brow and questioning expression are typical signs of confusion' },
    { src: 'https://media.istockphoto.com/id/1045886560/photo/portrait-of-smiling-handsome-man-in-blue-t-shirt-standing-with-crossed-arms-isolated-on-grey.jpg?s=612x612&w=0&k=20&c=TX1-1UJ3PKonFEmgs_WDZf7wtfqKVMHYjeRaYjaZ1Rc=', alt: 'Happy', emotion: 'happy', explanation: 'The wide smile and uplifted eyebrows indicate a positive and cheerful mood' },
    { src: 'https://img.freepik.com/free-photo/indoor-shot-emotional-curly-haired-young-woman-screams-loudly-keeps-palms-raised-mouth-opened-going-crazy-dressed-casual-green-knitted-sweater-poses-against-pink-background-feels-excited_273609-57240.jpg', alt: 'Excited', emotion: 'excited', explanation: 'The wide open mouth and energetic expression show excitement and enthusiasm' },
    { src: 'https://i.pinimg.com/736x/36/c3/3e/36c33e3ff7a210fdd48c57a7436cd61d.jpg', alt: 'Surprised', emotion: 'surprised', explanation: 'The wide-open eyes and slightly parted lips indicate surprise or astonishment' },
    { src: 'https://i.pinimg.com/736x/75/09/cd/7509cd625a684d1544aa7ca2b03809bc.jpg', alt: 'Determined', emotion: 'determined', explanation: 'The furrowed brow and focused expression suggest determination and resolve' },
    { src: 'https://i.pinimg.com/736x/17/23/95/172395fae6e480ee06ded2e59f4d7934.jpg', alt: 'Angry', emotion: 'angry', explanation: 'The furrowed brow and intense expression indicate anger or frustration' },
    { src: 'https://i.pinimg.com/736x/79/f1/6a/79f16a489aab154dd0b76b91d078f42b.jpg', alt: 'Sad', emotion: 'sad', explanation: 'The downward-facing mouth and drooping eyebrows suggest sadness or unhappiness' }
  ];
  function shuffleArray(array) {
  function shuffleArray<T>(array: T[]): T[] {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  function getRandomOptions(correctEmotion) {
    const otherEmotions = images
      .map(img => img.emotion)
      .filter(emotion => emotion !== correctEmotion);
  function getRandomOptions(correctEmotion: string): string[] {
    const otherEmotions = (window as any).images
      .map((img: Image) => img.emotion)
      .filter((emotion: string) => emotion !== correctEmotion);
    const shuffledEmotions = shuffleArray([...otherEmotions]);
    const options = shuffledEmotions.slice(0, 3);
    options.push(correctEmotion);
    return shuffleArray(options);
  }

  function checkAnswer(selected, correct) {
    const buttons = document.querySelectorAll('#options-container button');
    const currentImage = images[currentRound];
  function checkAnswer(selected: string, correct: string): void {
    const buttons = document.querySelectorAll<HTMLButtonElement>('#options-container button');
    const currentImage = (window as any).images[currentRound];
    const feedbackDiv = document.getElementById('feedback');
    const feedbackText = document.getElementById('feedback-text');
    const explanationText = document.getElementById('explanation-text');

    if (!feedbackDiv || !feedbackText || !explanationText) return;
    buttons.forEach(button => {
      button.disabled = true;
      if (button.textContent.toLowerCase() === correct) {
        button.classList.add('bg-green-500', 'text-white');
      } else if (button.textContent.toLowerCase() === selected && selected !== correct) {
        button.classList.add('bg-red-500', 'text-white');
      if (button.textContent?.toLowerCase() === selected) {
        button.classList.add(selected === correct ? 'bg-green-500' : 'bg-red-500', 'text-white');
      }
    });

    if (selected === correct) {
      score++;
      document.getElementById('correct').textContent = score;
      const correctSpan = document.getElementById('correct');
      if (correctSpan) correctSpan.textContent = score.toString();
      feedbackText.textContent = 'Correct!';
      feedbackText.className = 'text-xl font-bold mb-2 text-green-500';
    } else {
      feedbackText.textContent = 'Incorrect. The correct answer was: ' + correct;
      feedbackText.className = 'text-xl font-bold mb-2 text-red-500';
    }

    // Create and show explanation
    const explanationDiv = document.createElement('div');
    explanationDiv.className = 'mt-4 text-gray-700 text-center';
    explanationDiv.textContent = currentImage.explanation;
    
    // Create next round button
    const nextButton = document.createElement('button');
    nextButton.textContent = 'Next Round';
    nextButton.className = 'mt-4 w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors';
    nextButton.onclick = () => {
      currentRound++;
      startNewRound();
    };
    const container = document.getElementById('options-container');
    container.appendChild(explanationDiv);
    container.appendChild(nextButton);
    explanationText.textContent = currentImage.explanation;
    feedbackDiv.classList.remove('hidden');
    const nextRoundBtn = document.getElementById('next-round');
    if (nextRoundBtn) {
      nextRoundBtn.onclick = () => {
        currentRound++;
        feedbackDiv.classList.add('hidden');
        startNewRound();
      };
    }
  }

  function startNewRound() {
  function startNewRound(): void {
    if (currentRound >= maxRounds) {
      document.getElementById('final-score').textContent = score;
      document.getElementById('game-over').classList.remove('hidden');
      const finalScore = document.getElementById('final-score');
      const gameOver = document.getElementById('game-over');
      if (finalScore) finalScore.textContent = score.toString();
      if (gameOver) gameOver.classList.remove('hidden');
      return;
    }

    const currentImage = images[currentRound];
    document.getElementById('emotion-image').src = currentImage.src;
    document.getElementById('emotion-image').alt = currentImage.alt;
    const currentImage = (window as any).images[currentRound];
    const emotionImage = document.getElementById('emotion-image') as HTMLImageElement;
    if (emotionImage) {
      emotionImage.src = currentImage.src;
      emotionImage.alt = currentImage.alt;
    }

    const options = getRandomOptions(currentImage.emotion);
    const optionsContainer = document.getElementById('options-container');
    if (!optionsContainer) return;
    
    optionsContainer.innerHTML = '';

    options.forEach(option => {
      const button = document.createElement('button');
      button.textContent = option;
      button.className =
        'py-2 px-4 bg-gray-200 rounded hover:bg-gray-300 transition-colors';
      button.className = 'py-2 px-4 bg-gray-200 rounded hover:bg-gray-300 transition-colors';
      button.onclick = () => checkAnswer(option, currentImage.emotion);
      optionsContainer.appendChild(button);
    });
  }

  // Make images available globally
  (window as any).images = images;
  // Start the first round
  startNewRound();
  document.addEventListener('DOMContentLoaded', startNewRound);
</script>