---
import Layout from '@layouts/Default.astro';

const colors = ['bg-pink', 'bg-blue', 'bg-green', 'bg-yellow', 'bg-purple'];
const randomColor = colors[Math.floor(Math.random() * colors.length)];

// API Configuration
const API_KEY = 'AIzaSyC6ZO9xlK9OWs4N4GbVttxSeuDMTqMoULc';

// First question that should always appear first
const openingQuestion = "What kind of story would you like to explore today? Share your ideas...";

// Story questions bank for randomization
const storyQuestions = [
  "Did they save the day?",
  "Is this a happy story or a sad story?",
  "What emotions do you feel at the end?",
  "If you were them, what would you do?",
  "Could you do as they did?",
  "Do you think they're brave?"
];

// Generate question that should always be last
const generateQuestion = "This sounds like a nice story, shall we generate it?";

// Randomly select 2 questions (since we have fixed first and last questions)
const selectedQuestions = [...storyQuestions]
  .sort(() => Math.random() - 0.5)
  .slice(0, 2);

// Combine all questions in the desired order
const finalQuestions = [openingQuestion, ...selectedQuestions, generateQuestion];

// Add loading message
const loadingMessages = [
  "Crafting your story...",
  "Weaving the narrative...",
  "Adding some magic...",
  "Bringing characters to life..."
];
---

<Layout
  title='Read'
  pageTitle='Stoorybook | Read'
  description='Read stories on Stoorybook'
>
  <main class={`${randomColor} min-h-screen flex items-center justify-center p-6`}>
    <div class="max-w-2xl w-full space-y-8">
      {finalQuestions.map((question, index) => (
        <div 
          class:list={[
            "question-container transition-all duration-500",
            index !== 0 && "hidden opacity-0 translate-y-4"
          ]}
          data-question-index={index}
        >
          <div class="bg-white p-8 rounded-lg border-4 border-black shadow-brutal">
            <h3 class="text-2xl font-semibold mb-6">{question}</h3>
            
            <div class="space-y-4">
              {question.includes("happy story or sad story") ? (
                <div class="flex gap-4">
                  <button 
                    class="px-6 py-3 bg-yellow-200 border-2 border-black hover:bg-yellow-300 transition-colors answer-btn text-lg"
                    data-answer="happy"
                  >
                    Happy
                  </button>
                  <button 
                    class="px-6 py-3 bg-blue-200 border-2 border-black hover:bg-blue-300 transition-colors answer-btn text-lg"
                    data-answer="sad"
                  >
                    Sad
                  </button>
                </div>
              ) : question.includes("generate it") ? (
                <button 
                  class="w-full px-6 py-3 bg-green-200 border-2 border-black hover:bg-green-300 transition-colors generate-btn text-lg"
                >
                  Generate Story
                </button>
              ) : (
                <div class="space-y-4">
                  <textarea 
                    class="w-full p-4 border-2 border-black rounded resize-none focus:outline-none focus:ring-2 focus:ring-black text-lg" 
                    rows="4"
                    placeholder="Type your answer here..."
                    name={`question-${index}`}
                    id={`question-${index}`}
                  ></textarea>
                  <div class="flex justify-end gap-4">
                    <button 
                      class="px-6 py-3 bg-yellow-200 border-2 border-black hover:bg-yellow-300 transition-colors next-btn text-lg"
                    >
                      Next â†’
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  </main>
</Layout>

<style>
  .shadow-brutal {
    box-shadow: 4px 4px 0 0 #000;
  }
  
  .bg-pink { background-color: #ffc0cb; }
  .bg-blue { background-color: #87ceeb; }
  .bg-green { background-color: #98fb98; }
  .bg-yellow { background-color: #ffeb3b; }
  .bg-purple { background-color: #dda0dd; }

  .question-container.hidden {
    display: none;
  }

  .story-container {
    opacity: 0;
    transform: translateY(20px);
    animation: slideIn 0.5s ease-out forwards;
  }

  @keyframes slideIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .generate-again-btn {
    opacity: 0;
    transform: translateY(10px);
    animation: fadeIn 0.5s ease-out 0.5s forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script define:vars={{ API_KEY, loadingMessages }}>
  const answers = {};
  let isGenerating = false;

  async function generateStory() {
    if (isGenerating) return; // Prevent multiple submissions
    isGenerating = true;

    const generateBtn = document.querySelector('.generate-btn');
    if (generateBtn) {
      generateBtn.disabled = true;
      generateBtn.style.opacity = '0.5';
      generateBtn.textContent = 'Generating...';
    }
    
    const storyContainer = document.createElement('div');
    storyContainer.className = 'bg-white p-8 rounded-lg border-4 border-black shadow-brutal mt-8 story-container';
    
    const storyContent = document.createElement('div');
    storyContent.className = 'prose prose-lg max-w-none';
    
    try {
      console.log('Starting story generation with answers:', answers);

      const prompt = `Create an engaging story where:
      - The main idea is: ${answers[0]}
      - ${answers[1]}
      - The emotional tone is: ${answers[2]}
      - The character ${answers[3]}
      Make it engaging and around 3 paragraphs long. Use descriptive language and make it flow naturally.`;

      const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error:', errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('API Response:', data);

      if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {
        throw new Error('Invalid response format from API');
      }

      const generatedText = data.candidates[0].content.parts[0].text;
      
      // Display the generated story
      storyContent.innerHTML = generatedText.split('\n')
        .filter(para => para.trim())
        .map(para => `<p>${para}</p>`)
        .join('');
      
      // Replace the questions with the story container
      const mainContainer = document.querySelector('.max-w-2xl');
      if (mainContainer) {
        mainContainer.innerHTML = '';
        mainContainer.appendChild(storyContainer);
      }
      storyContainer.appendChild(storyContent);

      // Add share button
      const buttonContainer = document.createElement('div');
      buttonContainer.className = 'flex gap-4 mt-6';

      const shareButton = document.createElement('button');
      shareButton.className = 'px-6 py-3 bg-purple-200 border-2 border-black hover:bg-purple-300 transition-colors text-lg';
      shareButton.textContent = 'Share Story';
      shareButton.onclick = async () => {
        try {
          await navigator.share({
            title: 'My Generated Story',
            text: storyContent.textContent
          });
        } catch {
          navigator.clipboard.writeText(storyContent.textContent);
          shareButton.textContent = 'Copied to clipboard!';
          setTimeout(() => {
            shareButton.textContent = 'Share Story';
          }, 2000);
        }
      };

      buttonContainer.appendChild(shareButton);
      storyContainer.appendChild(buttonContainer);

    } catch (error) {
      console.error('Error generating story:', error);
      storyContent.innerHTML = `<p class="text-red-600">Error generating story: ${error.message}</p>`;
      storyContainer.appendChild(storyContent);
      
      const mainContainer = document.querySelector('.max-w-2xl');
      if (mainContainer) {
        mainContainer.innerHTML = '';
        mainContainer.appendChild(storyContainer);
      }
    }
  }

  function showNextQuestion(currentIndex) {
    const currentQuestion = document.querySelector(`[data-question-index="${currentIndex}"]`);
    const nextQuestion = document.querySelector(`[data-question-index="${currentIndex + 1}"]`);
    
    if (currentQuestion && nextQuestion) {
      currentQuestion.classList.add('hidden');
      nextQuestion.classList.remove('hidden');
      setTimeout(() => {
        nextQuestion.classList.remove('opacity-0', 'translate-y-4');
      }, 50);
    }
  }

  // Handle next button for text inputs
  document.querySelectorAll('.next-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const container = e.target.closest('.question-container');
      if (!container) return;
      
      const index = parseInt(container.getAttribute('data-question-index') || '0');
      const textarea = container.querySelector('textarea');
      if (textarea && textarea.value.trim()) {
        answers[index] = textarea.value;
        showNextQuestion(index);
      }
    });
  });

  // Handle happy/sad buttons
  document.querySelectorAll('.answer-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const container = e.target.closest('.question-container');
      if (!container) return;
      
      const index = parseInt(container.getAttribute('data-question-index') || '0');
      const answer = e.target.getAttribute('data-answer');
      if (answer) {
        answers[index] = answer;
        showNextQuestion(index);
      }
    });
  });

  // Handle generate button
  document.querySelector('.generate-btn')?.addEventListener('click', generateStory);
</script>
